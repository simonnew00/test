// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using backend_vincent;

#nullable disable

namespace backend_vincent.Migrations
{
    [DbContext(typeof(VincentContext))]
    [Migration("20230705064320_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRoleClaim<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("backend_vincent.Model.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deathdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EarTag")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("FK_FatherAnimal_Id")
                        .HasColumnType("int");

                    b.Property<int?>("FK_MotherAnimal_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Section_Id")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("OnFarm")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SlaughterDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Stillbirth")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FK_FatherAnimal_Id");

                    b.HasIndex("FK_MotherAnimal_Id");

                    b.HasIndex("FK_Section_Id");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("backend_vincent.Model.AnimalArchive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalArchiveType")
                        .HasColumnType("int");

                    b.Property<int>("AnimalGroupAmount")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EarTag")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FatherEarTag")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("MotherEarTag")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PrimaryRace")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SecondaryRace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AnimalArchives");
                });

            modelBuilder.Entity("backend_vincent.Model.AnimalGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalCategory")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FK_Section_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Section_Id");

                    b.ToTable("AnimalGroups");
                });

            modelBuilder.Entity("backend_vincent.Model.AnimalGroupMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_AnimalGroup_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Animal_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_AnimalGroup_Id");

                    b.HasIndex("FK_Animal_Id");

                    b.ToTable("AnimalGroupMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.AnimalMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalGroupAmount")
                        .HasColumnType("int");

                    b.Property<int>("CultivationMethod")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EarTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FK_Customer_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FK_DeliveryNote_Id")
                        .HasColumnType("int");

                    b.Property<int?>("FK_Invoice_Id")
                        .HasColumnType("int");

                    b.Property<Guid?>("FK_Supplier_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InventoryActionType")
                        .HasColumnType("int");

                    b.Property<int>("InventoryChangeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Customer_Id");

                    b.HasIndex("FK_DeliveryNote_Id");

                    b.HasIndex("FK_Invoice_Id");

                    b.HasIndex("FK_Supplier_Id");

                    b.ToTable("AnimalMovements");
                });

            modelBuilder.Entity("backend_vincent.Model.AnimalRaceMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_Animal_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Race_Id")
                        .HasColumnType("int");

                    b.Property<int>("RaceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Animal_Id");

                    b.HasIndex("FK_Race_Id");

                    b.ToTable("AnimalRaceMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FK_Company_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Company_Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("backend_vincent.Model.AspNetClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ClaimType")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AspNetClaims");
                });

            modelBuilder.Entity("backend_vincent.Model.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FK_Location_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FK_Location_Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("backend_vincent.Model.BoardEmployeeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("FK_Board_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FK_Employee_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FK_Board_Id");

                    b.HasIndex("FK_Employee_Id");

                    b.ToTable("BoardEmployeeMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.BoardedAnimal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalCategory")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EarTag")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FK_Customer_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FK_Invoice_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Section_Id")
                        .HasColumnType("int");

                    b.Property<byte[]>("OwnerSign")
                        .IsRequired()
                        .HasMaxLength(10485760)
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Customer_Id");

                    b.HasIndex("FK_Invoice_Id");

                    b.HasIndex("FK_Section_Id");

                    b.ToTable("BoardedAnimals");
                });

            modelBuilder.Entity("backend_vincent.Model.CalendarEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllDay")
                        .HasColumnType("bit");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatorEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorEmployeeId");

                    b.ToTable("CalendarEntries");
                });

            modelBuilder.Entity("backend_vincent.Model.CalendarEntryEmployeeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("FK_CalendarEntry_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FK_Employee_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FK_CalendarEntry_Id");

                    b.HasIndex("FK_Employee_Id");

                    b.ToTable("CalendarEntryEmployeeMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FK_Column_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FK_Company_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FK_Creator_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FK_Column_Id");

                    b.HasIndex("FK_Company_Id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("backend_vincent.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdentificationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("backend_vincent.Model.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("backend_vincent.Model.ChecklistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("FK_Card_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FK_Card_Id");

                    b.ToTable("ChecklistItems");
                });

            modelBuilder.Entity("backend_vincent.Model.CleaningAndDesinfection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FK_Section_Id")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FK_Section_Id");

                    b.ToTable("CleaningAndDesinfections");
                });

            modelBuilder.Entity("backend_vincent.Model.CleaningAndDesinfectionResourceAccessMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_CleaningAndDesinfection_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_ResourceStock_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_CleaningAndDesinfection_Id");

                    b.HasIndex("FK_ResourceStock_Id");

                    b.ToTable("CleaningAndDesinfectionResourceAccessMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FK_Board_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FK_Company_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FK_Creator_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FK_Board_Id");

                    b.HasIndex("FK_Company_Id");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("backend_vincent.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Edited")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FK_Card_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FK_Employee_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FK_Card_Id");

                    b.HasIndex("FK_Employee_Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("backend_vincent.Model.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("DeletionTS")
                        .HasColumnType("datetime2");

                    b.Property<string>("FK_Creator_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FreezeTS")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("isFrozen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("backend_vincent.Model.CropJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CropAction")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FK_FieldRow_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Field_Id")
                        .HasColumnType("int");

                    b.Property<int>("FertilizerType")
                        .HasColumnType("int");

                    b.Property<int>("QuantityPerHa")
                        .HasColumnType("int");

                    b.Property<int>("SeedStatus")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentSubstance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_FieldRow_Id");

                    b.HasIndex("FK_Field_Id");

                    b.ToTable("CropJournals");
                });

            modelBuilder.Entity("backend_vincent.Model.CropRotationPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FK_FieldRow_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Field_Id")
                        .HasColumnType("int");

                    b.Property<int>("FollowingCrop")
                        .HasColumnType("int");

                    b.Property<int>("MainCrop")
                        .HasColumnType("int");

                    b.Property<int>("PrecedingCrop")
                        .HasColumnType("int");

                    b.Property<string>("PrecedingCropSeedVariety")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_FieldRow_Id");

                    b.HasIndex("FK_Field_Id");

                    b.ToTable("CropRotationPlans");
                });

            modelBuilder.Entity("backend_vincent.Model.CustomSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("CancelAtPeriodEnd")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CurrentPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FK_User_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FK_User_Id")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("backend_vincent.Model.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("FK_Company_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FK_Company_Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("backend_vincent.Model.DeliveryNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasMaxLength(10485760)
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DeliveryNotes");
                });

            modelBuilder.Entity("backend_vincent.Model.DepositBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FK_Customer_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Customer_Id");

                    b.ToTable("DepositBoxes");
                });

            modelBuilder.Entity("backend_vincent.Model.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FK_Company_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FK_User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FK_Company_Id");

                    b.HasIndex("FK_User_Id")
                        .IsUnique()
                        .HasFilter("[FK_User_Id] IS NOT NULL");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("backend_vincent.Model.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_Location_Id")
                        .HasColumnType("int");

                    b.Property<Point>("GeoLocation")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Location_Id");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("backend_vincent.Model.FieldRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_Field_Id")
                        .HasColumnType("int");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Field_Id");

                    b.ToTable("FieldRows");
                });

            modelBuilder.Entity("backend_vincent.Model.GMOCertification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(15000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FK_Supplier_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Supplier_Id");

                    b.ToTable("GMOCertifications");
                });

            modelBuilder.Entity("backend_vincent.Model.Harvest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CropType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_Field_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Location_Id")
                        .HasColumnType("int");

                    b.Property<int>("OrganicStatus")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.Property<int>("UsageQuantity")
                        .HasColumnType("int");

                    b.Property<int>("UsageType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Field_Id");

                    b.HasIndex("FK_Location_Id");

                    b.ToTable("Harvests");
                });

            modelBuilder.Entity("backend_vincent.Model.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_ResourceStock_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_ResourceStock_Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("backend_vincent.Model.InternalUse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FK_ResourceStock_Id")
                        .HasColumnType("int");

                    b.Property<int>("InternalUseType")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_ResourceStock_Id");

                    b.ToTable("InternalUses");
                });

            modelBuilder.Entity("backend_vincent.Model.Invitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpirationTS")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FK_Company_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FK_Creator_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FK_Receiver_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Seed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FK_Company_Id");

                    b.HasIndex("FK_Creator_Id");

                    b.HasIndex("FK_Receiver_Id")
                        .IsUnique()
                        .HasFilter("[FK_Receiver_Id] IS NOT NULL");

                    b.ToTable("Invitations");
                });

            modelBuilder.Entity("backend_vincent.Model.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasMaxLength(10485760)
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("InvoiceCategory")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("backend_vincent.Model.Irrigation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationH")
                        .HasColumnType("int");

                    b.Property<int>("FK_Field_Id")
                        .HasColumnType("int");

                    b.Property<int>("IrrigationType")
                        .HasColumnType("int");

                    b.Property<int>("WaterVolumeL")
                        .HasColumnType("int");

                    b.Property<string>("WeatherConditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FK_Field_Id");

                    b.ToTable("Irrigations");
                });

            modelBuilder.Entity("backend_vincent.Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletionTS")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FK_Company_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FreezeTS")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HeadQuarters")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isFrozen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FK_Company_Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("backend_vincent.Model.LocationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_Category_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Location_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Category_Id");

                    b.HasIndex("FK_Location_Id");

                    b.ToTable("LocationCategories");
                });

            modelBuilder.Entity("backend_vincent.Model.LocationCertification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_Certification_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Location_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Certification_Id");

                    b.HasIndex("FK_Location_Id");

                    b.ToTable("LocationCertifications");
                });

            modelBuilder.Entity("backend_vincent.Model.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_Invoice_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Location_Id")
                        .HasColumnType("int");

                    b.Property<int>("MachineStatus")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FK_Invoice_Id");

                    b.HasIndex("FK_Location_Id");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("backend_vincent.Model.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<bool>("BaseModule")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("PriceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("backend_vincent.Model.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FK_Company_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FK_NotificationType_Id")
                        .HasColumnType("int");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FK_Company_Id");

                    b.HasIndex("FK_NotificationType_Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("backend_vincent.Model.NotificationEmployeeMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("FK_Employee_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FK_Notification_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Employee_Id");

                    b.HasIndex("FK_Notification_Id");

                    b.ToTable("NotificationEmployeeMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("backend_vincent.Model.OutdoorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FK_AnimalGroup_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Field_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("OutdoorAccessType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FK_AnimalGroup_Id");

                    b.HasIndex("FK_Field_Id");

                    b.ToTable("OutdoorLogs");
                });

            modelBuilder.Entity("backend_vincent.Model.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatchNr")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FK_Recipe_Id")
                        .HasColumnType("int");

                    b.Property<bool>("PostCleaning")
                        .HasColumnType("bit");

                    b.Property<bool>("PreCleaning")
                        .HasColumnType("bit");

                    b.Property<int>("ProcessingStep")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Recipe_Id");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("backend_vincent.Model.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AverageWeightKg")
                        .HasColumnType("int");

                    b.Property<int>("BreedingPurpose")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FK_Species_Id")
                        .HasColumnType("int");

                    b.Property<int>("GrowthRate")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FK_Species_Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("backend_vincent.Model.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Etiquette")
                        .HasMaxLength(10485760)
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("FK_Employee_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RecipeType")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Employee_Id");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("backend_vincent.Model.RecipeIngredientMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_Ingredient_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Recipe_Id")
                        .HasColumnType("int");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Ingredient_Id");

                    b.HasIndex("FK_Recipe_Id");

                    b.ToTable("RecipeIngredientMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.ResourceAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveIngredient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FK_Harvest_Id")
                        .HasColumnType("int");

                    b.Property<int?>("FK_Invoice_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Location_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_ResourceStock_Id")
                        .HasColumnType("int");

                    b.Property<Guid>("FK_Supplier_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("GMOFree")
                        .HasColumnType("bit");

                    b.Property<string>("INCIName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganicStatus")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ResourceCategory")
                        .HasColumnType("int");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Harvest_Id")
                        .IsUnique()
                        .HasFilter("[FK_Harvest_Id] IS NOT NULL");

                    b.HasIndex("FK_Invoice_Id");

                    b.HasIndex("FK_Location_Id");

                    b.HasIndex("FK_ResourceStock_Id")
                        .IsUnique();

                    b.HasIndex("FK_Supplier_Id");

                    b.ToTable("ResourceAccesses");
                });

            modelBuilder.Entity("backend_vincent.Model.ResourceStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ResourceStocks");
                });

            modelBuilder.Entity("backend_vincent.Model.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("FK_Customer_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FK_DeliveryNote_Id")
                        .HasColumnType("int");

                    b.Property<int?>("FK_Invoice_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_ResourceStock_Id")
                        .HasColumnType("int");

                    b.Property<int>("OrganicStatus")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SaleType")
                        .HasColumnType("int");

                    b.Property<DateTime>("SalesDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Unit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Customer_Id");

                    b.HasIndex("FK_DeliveryNote_Id");

                    b.HasIndex("FK_Invoice_Id");

                    b.HasIndex("FK_ResourceStock_Id");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("backend_vincent.Model.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FK_Location_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PrimarySection")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FK_Location_Id");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("backend_vincent.Model.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FK_Invoice_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Machine_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FK_Invoice_Id");

                    b.HasIndex("FK_Machine_Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("backend_vincent.Model.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("backend_vincent.Model.SubscribedEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Ts")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SubscribedEmails");
                });

            modelBuilder.Entity("backend_vincent.Model.SubscriptionModuleMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CancelAtPeriodEnd")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CurrentPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("FK_Module_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Subscription_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Module_Id");

                    b.HasIndex("FK_Subscription_Id");

                    b.ToTable("SubscriptionModuleMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("FK_Company_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FK_Company_Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("backend_vincent.Model.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Disease")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoubleWaitingPeriodDays")
                        .HasColumnType("int");

                    b.Property<int?>("FK_Animal_Id")
                        .HasColumnType("int");

                    b.Property<int?>("FK_Invoice_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("FourtyEightHourDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LegalWaitingPeriodDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FK_Animal_Id");

                    b.HasIndex("FK_Invoice_Id");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("backend_vincent.Model.UnsubscribedEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Ts")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UnsubscribedEmails");
                });

            modelBuilder.Entity("backend_vincent.Model.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("backend_vincent.Model.WildCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnnualAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CollectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CollectionPlace")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(30000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ExternalArea")
                        .HasColumnType("bit");

                    b.Property<int>("FK_Invoice_Id")
                        .HasColumnType("int");

                    b.Property<int>("FK_Location_Id")
                        .HasColumnType("int");

                    b.Property<string>("GStkNr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KGNr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastBannedSubstanceType")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastBannedSubstanceUseDate")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PlantPart")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UsePurpose")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("FK_Invoice_Id");

                    b.HasIndex("FK_Location_Id");

                    b.ToTable("WildCollections");
                });

            modelBuilder.Entity("backend_vincent.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Ts")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("backend_vincent.Model.ApplicationRoleClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>");

                    b.Property<string>("ApplicationRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ClaimId")
                        .HasMaxLength(500)
                        .HasColumnType("int");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("ClaimId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasDiscriminator().HasValue("ApplicationRoleClaim");
                });

            modelBuilder.Entity("backend_vincent.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApplicationRole")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailVerificationSeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerificationTS")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FK_CreatorCompany_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FK_InvitedToCompany_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FreeTrial")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("InvitationPending")
                        .HasColumnType("bit");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTS")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Ts")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FK_CreatorCompany_Id")
                        .IsUnique()
                        .HasFilter("[FK_CreatorCompany_Id] IS NOT NULL");

                    b.HasIndex("FK_InvitedToCompany_Id");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("backend_vincent.Model.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("backend_vincent.Model.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend_vincent.Model.Animal", b =>
                {
                    b.HasOne("backend_vincent.Model.Animal", "FatherAnimal")
                        .WithMany("FatherAnimalChildren")
                        .HasForeignKey("FK_FatherAnimal_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.Animal", "MotherAnimal")
                        .WithMany("MotherAnimalChildren")
                        .HasForeignKey("FK_MotherAnimal_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.Section", "Section")
                        .WithMany("Animals")
                        .HasForeignKey("FK_Section_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FatherAnimal");

                    b.Navigation("MotherAnimal");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("backend_vincent.Model.AnimalGroup", b =>
                {
                    b.HasOne("backend_vincent.Model.Section", "Section")
                        .WithMany("AnimalGroups")
                        .HasForeignKey("FK_Section_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("backend_vincent.Model.AnimalGroupMapping", b =>
                {
                    b.HasOne("backend_vincent.Model.AnimalGroup", "AnimalGroup")
                        .WithMany("AnimalGroupMappings")
                        .HasForeignKey("FK_AnimalGroup_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Animal", "Animal")
                        .WithMany("AnimalGroupMappings")
                        .HasForeignKey("FK_Animal_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("AnimalGroup");
                });

            modelBuilder.Entity("backend_vincent.Model.AnimalMovement", b =>
                {
                    b.HasOne("backend_vincent.Model.Customer", "Customer")
                        .WithMany("AnimalMovements")
                        .HasForeignKey("FK_Customer_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.DeliveryNote", "DeliveryNote")
                        .WithMany()
                        .HasForeignKey("FK_DeliveryNote_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.Invoice", "Invoice")
                        .WithMany("AnimalMovements")
                        .HasForeignKey("FK_Invoice_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.Supplier", "Supplier")
                        .WithMany("AnimalMovements")
                        .HasForeignKey("FK_Supplier_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");

                    b.Navigation("DeliveryNote");

                    b.Navigation("Invoice");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("backend_vincent.Model.AnimalRaceMapping", b =>
                {
                    b.HasOne("backend_vincent.Model.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("FK_Animal_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Race", "Race")
                        .WithMany("AnimalRaceMappings")
                        .HasForeignKey("FK_Race_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("backend_vincent.Model.ApplicationRole", b =>
                {
                    b.HasOne("backend_vincent.Model.Company", "Company")
                        .WithMany("Roles")
                        .HasForeignKey("FK_Company_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("backend_vincent.Model.Board", b =>
                {
                    b.HasOne("backend_vincent.Model.Location", "Location")
                        .WithMany("Boards")
                        .HasForeignKey("FK_Location_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("backend_vincent.Model.BoardEmployeeMapping", b =>
                {
                    b.HasOne("backend_vincent.Model.Board", "Board")
                        .WithMany("BoardEmployeeMappings")
                        .HasForeignKey("FK_Board_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Employee", "Employee")
                        .WithMany("BoardEmployeeMappings")
                        .HasForeignKey("FK_Employee_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("backend_vincent.Model.BoardedAnimal", b =>
                {
                    b.HasOne("backend_vincent.Model.Customer", "Customer")
                        .WithMany("BoardedAnimals")
                        .HasForeignKey("FK_Customer_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.Invoice", "Invoice")
                        .WithMany("BoardedAnimals")
                        .HasForeignKey("FK_Invoice_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.Section", "Section")
                        .WithMany()
                        .HasForeignKey("FK_Section_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("backend_vincent.Model.CalendarEntry", b =>
                {
                    b.HasOne("backend_vincent.Model.Employee", "CreatorEmployee")
                        .WithMany("CreatedCalendarEvents")
                        .HasForeignKey("CreatorEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatorEmployee");
                });

            modelBuilder.Entity("backend_vincent.Model.CalendarEntryEmployeeMapping", b =>
                {
                    b.HasOne("backend_vincent.Model.CalendarEntry", "CalendarEntry")
                        .WithMany("CalendarEntryEmployeeMapping")
                        .HasForeignKey("FK_CalendarEntry_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Employee", "Employee")
                        .WithMany("CalendarEntryEmployeeMappings")
                        .HasForeignKey("FK_Employee_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CalendarEntry");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("backend_vincent.Model.Card", b =>
                {
                    b.HasOne("backend_vincent.Model.Employee", "Creator")
                        .WithMany("CreatedCards")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.Column", "Column")
                        .WithMany("Cards")
                        .HasForeignKey("FK_Column_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Company", "Company")
                        .WithMany("Cards")
                        .HasForeignKey("FK_Company_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Column");

                    b.Navigation("Company");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("backend_vincent.Model.ChecklistItem", b =>
                {
                    b.HasOne("backend_vincent.Model.Card", "Card")
                        .WithMany("ChecklistItems")
                        .HasForeignKey("FK_Card_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("backend_vincent.Model.CleaningAndDesinfection", b =>
                {
                    b.HasOne("backend_vincent.Model.Section", "Section")
                        .WithMany()
                        .HasForeignKey("FK_Section_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("backend_vincent.Model.CleaningAndDesinfectionResourceAccessMapping", b =>
                {
                    b.HasOne("backend_vincent.Model.CleaningAndDesinfection", "CleaningAndDesinfection")
                        .WithMany("CleaningAndDesinfectionResourceAccessMappings")
                        .HasForeignKey("FK_CleaningAndDesinfection_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.ResourceStock", "ResourceStock")
                        .WithMany("CleaningAndDesinfectionResourceAccessMappings")
                        .HasForeignKey("FK_ResourceStock_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CleaningAndDesinfection");

                    b.Navigation("ResourceStock");
                });

            modelBuilder.Entity("backend_vincent.Model.Column", b =>
                {
                    b.HasOne("backend_vincent.Model.Employee", "Creator")
                        .WithMany("CreatedColumns")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.Board", "Board")
                        .WithMany("Columns")
                        .HasForeignKey("FK_Board_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Company", "Company")
                        .WithMany("Columns")
                        .HasForeignKey("FK_Company_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Company");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("backend_vincent.Model.Comment", b =>
                {
                    b.HasOne("backend_vincent.Model.Card", "Card")
                        .WithMany("Comments")
                        .HasForeignKey("FK_Card_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Employee", "Employee")
                        .WithMany("Comments")
                        .HasForeignKey("FK_Employee_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("backend_vincent.Model.CropJournal", b =>
                {
                    b.HasOne("backend_vincent.Model.FieldRow", "FieldRow")
                        .WithMany("CropJournals")
                        .HasForeignKey("FK_FieldRow_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Field", "Field")
                        .WithMany("CropJournals")
                        .HasForeignKey("FK_Field_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("FieldRow");
                });

            modelBuilder.Entity("backend_vincent.Model.CropRotationPlan", b =>
                {
                    b.HasOne("backend_vincent.Model.FieldRow", "FieldRow")
                        .WithMany("CropRotationPlans")
                        .HasForeignKey("FK_FieldRow_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Field", "Field")
                        .WithMany("CropRotationPlans")
                        .HasForeignKey("FK_Field_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("FieldRow");
                });

            modelBuilder.Entity("backend_vincent.Model.CustomSubscription", b =>
                {
                    b.HasOne("backend_vincent.User", "User")
                        .WithOne("Subscription")
                        .HasForeignKey("backend_vincent.Model.CustomSubscription", "FK_User_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend_vincent.Model.Customer", b =>
                {
                    b.HasOne("backend_vincent.Model.Company", "Company")
                        .WithMany("Customers")
                        .HasForeignKey("FK_Company_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("backend_vincent.Model.DepositBox", b =>
                {
                    b.HasOne("backend_vincent.Model.Customer", "Customer")
                        .WithMany("DepositBoxes")
                        .HasForeignKey("FK_Customer_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("backend_vincent.Model.Employee", b =>
                {
                    b.HasOne("backend_vincent.Model.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("FK_Company_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_vincent.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("backend_vincent.Model.Employee", "FK_User_Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend_vincent.Model.Field", b =>
                {
                    b.HasOne("backend_vincent.Model.Location", "Location")
                        .WithMany("Fields")
                        .HasForeignKey("FK_Location_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("backend_vincent.Model.FieldRow", b =>
                {
                    b.HasOne("backend_vincent.Model.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FK_Field_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("backend_vincent.Model.GMOCertification", b =>
                {
                    b.HasOne("backend_vincent.Model.Supplier", "Supplier")
                        .WithMany("GMOCertifications")
                        .HasForeignKey("FK_Supplier_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("backend_vincent.Model.Harvest", b =>
                {
                    b.HasOne("backend_vincent.Model.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FK_Field_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.Location", "Location")
                        .WithMany("Harvests")
                        .HasForeignKey("FK_Location_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("backend_vincent.Model.Ingredient", b =>
                {
                    b.HasOne("backend_vincent.Model.ResourceStock", "ResourceStock")
                        .WithMany("Ingredients")
                        .HasForeignKey("FK_ResourceStock_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ResourceStock");
                });

            modelBuilder.Entity("backend_vincent.Model.InternalUse", b =>
                {
                    b.HasOne("backend_vincent.Model.ResourceStock", "ResourceStock")
                        .WithMany("InternalUses")
                        .HasForeignKey("FK_ResourceStock_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ResourceStock");
                });

            modelBuilder.Entity("backend_vincent.Model.Invitation", b =>
                {
                    b.HasOne("backend_vincent.Model.Company", "Company")
                        .WithMany("Invitations")
                        .HasForeignKey("FK_Company_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_vincent.User", "Creator")
                        .WithMany("CreatedInvitations")
                        .HasForeignKey("FK_Creator_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.User", "Receiver")
                        .WithOne("InvitationReceiver")
                        .HasForeignKey("backend_vincent.Model.Invitation", "FK_Receiver_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("Creator");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("backend_vincent.Model.Irrigation", b =>
                {
                    b.HasOne("backend_vincent.Model.Field", "Field")
                        .WithMany("Irrigations")
                        .HasForeignKey("FK_Field_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("backend_vincent.Model.Location", b =>
                {
                    b.HasOne("backend_vincent.Model.Company", "Company")
                        .WithMany("Locations")
                        .HasForeignKey("FK_Company_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("backend_vincent.Model.LocationCategory", b =>
                {
                    b.HasOne("backend_vincent.Model.Category", "Category")
                        .WithMany("LocationCategories")
                        .HasForeignKey("FK_Category_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Location", "Location")
                        .WithMany("LocationCategories")
                        .HasForeignKey("FK_Location_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("backend_vincent.Model.LocationCertification", b =>
                {
                    b.HasOne("backend_vincent.Model.Certification", "Certification")
                        .WithMany("LocationCertifications")
                        .HasForeignKey("FK_Certification_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Location", "Location")
                        .WithMany("LocationCertifications")
                        .HasForeignKey("FK_Location_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("backend_vincent.Model.Machine", b =>
                {
                    b.HasOne("backend_vincent.Model.Invoice", "Invoice")
                        .WithMany("Machines")
                        .HasForeignKey("FK_Invoice_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Location", "Location")
                        .WithMany("Machines")
                        .HasForeignKey("FK_Location_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("backend_vincent.Model.Notification", b =>
                {
                    b.HasOne("backend_vincent.Model.Company", "Company")
                        .WithMany("Notifications")
                        .HasForeignKey("FK_Company_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("FK_NotificationType_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("backend_vincent.Model.NotificationEmployeeMapping", b =>
                {
                    b.HasOne("backend_vincent.Model.Employee", "Employee")
                        .WithMany("NotificationEmployeeMappings")
                        .HasForeignKey("FK_Employee_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Notification", "Notification")
                        .WithMany("NotificationEmployeeMappings")
                        .HasForeignKey("FK_Notification_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("backend_vincent.Model.OutdoorLog", b =>
                {
                    b.HasOne("backend_vincent.Model.AnimalGroup", "AnimalGroup")
                        .WithMany("OutdoorLogs")
                        .HasForeignKey("FK_AnimalGroup_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FK_Field_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnimalGroup");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("backend_vincent.Model.Production", b =>
                {
                    b.HasOne("backend_vincent.Model.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("FK_Recipe_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("backend_vincent.Model.Race", b =>
                {
                    b.HasOne("backend_vincent.Model.Species", "Species")
                        .WithMany("Races")
                        .HasForeignKey("FK_Species_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Species");
                });

            modelBuilder.Entity("backend_vincent.Model.Recipe", b =>
                {
                    b.HasOne("backend_vincent.Model.Employee", "Employee")
                        .WithMany("Recipes")
                        .HasForeignKey("FK_Employee_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("backend_vincent.Model.RecipeIngredientMapping", b =>
                {
                    b.HasOne("backend_vincent.Model.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredientMappings")
                        .HasForeignKey("FK_Ingredient_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Recipe", "Recipe")
                        .WithMany("RecipeIngredientMappings")
                        .HasForeignKey("FK_Recipe_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("backend_vincent.Model.ResourceAccess", b =>
                {
                    b.HasOne("backend_vincent.Model.Harvest", "Harvest")
                        .WithOne("ResourceAccess")
                        .HasForeignKey("backend_vincent.Model.ResourceAccess", "FK_Harvest_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.Invoice", "Invoice")
                        .WithMany("ResourceAccesses")
                        .HasForeignKey("FK_Invoice_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.Location", "Location")
                        .WithMany()
                        .HasForeignKey("FK_Location_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.ResourceStock", "ResourceStock")
                        .WithOne("ResourceAccess")
                        .HasForeignKey("backend_vincent.Model.ResourceAccess", "FK_ResourceStock_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Supplier", "Supplier")
                        .WithMany("ResourceAccesses")
                        .HasForeignKey("FK_Supplier_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Harvest");

                    b.Navigation("Invoice");

                    b.Navigation("Location");

                    b.Navigation("ResourceStock");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("backend_vincent.Model.Sale", b =>
                {
                    b.HasOne("backend_vincent.Model.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("FK_Customer_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.DeliveryNote", "DeliveryNote")
                        .WithMany("Sales")
                        .HasForeignKey("FK_DeliveryNote_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.Invoice", "Invoice")
                        .WithMany("Sales")
                        .HasForeignKey("FK_Invoice_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.ResourceStock", "ResourceStock")
                        .WithMany("Sales")
                        .HasForeignKey("FK_ResourceStock_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DeliveryNote");

                    b.Navigation("Invoice");

                    b.Navigation("ResourceStock");
                });

            modelBuilder.Entity("backend_vincent.Model.Section", b =>
                {
                    b.HasOne("backend_vincent.Model.Location", "Location")
                        .WithMany("Sections")
                        .HasForeignKey("FK_Location_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("backend_vincent.Model.Service", b =>
                {
                    b.HasOne("backend_vincent.Model.Invoice", "Invoice")
                        .WithMany("Services")
                        .HasForeignKey("FK_Invoice_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Machine", "Machine")
                        .WithMany("Services")
                        .HasForeignKey("FK_Machine_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("backend_vincent.Model.SubscriptionModuleMapping", b =>
                {
                    b.HasOne("backend_vincent.Model.Module", "Module")
                        .WithMany("SubscriptionModuleMappings")
                        .HasForeignKey("FK_Module_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.CustomSubscription", "Subscription")
                        .WithMany("SubscriptionModuleMappings")
                        .HasForeignKey("FK_Subscription_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("backend_vincent.Model.Supplier", b =>
                {
                    b.HasOne("backend_vincent.Model.Company", "Company")
                        .WithMany("Suppliers")
                        .HasForeignKey("FK_Company_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("backend_vincent.Model.Treatment", b =>
                {
                    b.HasOne("backend_vincent.Model.Animal", "Animal")
                        .WithMany("Treatments")
                        .HasForeignKey("FK_Animal_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.Invoice", "Invoice")
                        .WithMany("Treatments")
                        .HasForeignKey("FK_Invoice_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Animal");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("backend_vincent.Model.UserRole", b =>
                {
                    b.HasOne("backend_vincent.Model.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_vincent.User", "User")
                        .WithOne("CompanyRole")
                        .HasForeignKey("backend_vincent.Model.UserRole", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend_vincent.Model.WildCollection", b =>
                {
                    b.HasOne("backend_vincent.Model.Invoice", "Invoice")
                        .WithMany("WildCollections")
                        .HasForeignKey("FK_Invoice_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend_vincent.Model.Location", "Location")
                        .WithMany("WildCollections")
                        .HasForeignKey("FK_Location_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("backend_vincent.RefreshToken", b =>
                {
                    b.HasOne("backend_vincent.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend_vincent.Model.ApplicationRoleClaim", b =>
                {
                    b.HasOne("backend_vincent.Model.ApplicationRole", null)
                        .WithMany("ApplicationRoleClaims")
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.AspNetClaims", "Claim")
                        .WithMany("ApplicationRoleClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");
                });

            modelBuilder.Entity("backend_vincent.User", b =>
                {
                    b.HasOne("backend_vincent.Model.Company", "CreatorCompany")
                        .WithOne("Creator")
                        .HasForeignKey("backend_vincent.User", "FK_CreatorCompany_Id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("backend_vincent.Model.Company", "InvitedToCompany")
                        .WithMany("InvitedUsers")
                        .HasForeignKey("FK_InvitedToCompany_Id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatorCompany");

                    b.Navigation("InvitedToCompany");
                });

            modelBuilder.Entity("backend_vincent.Model.Animal", b =>
                {
                    b.Navigation("AnimalGroupMappings");

                    b.Navigation("FatherAnimalChildren");

                    b.Navigation("MotherAnimalChildren");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("backend_vincent.Model.AnimalGroup", b =>
                {
                    b.Navigation("AnimalGroupMappings");

                    b.Navigation("OutdoorLogs");
                });

            modelBuilder.Entity("backend_vincent.Model.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationRoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("backend_vincent.Model.AspNetClaims", b =>
                {
                    b.Navigation("ApplicationRoleClaims");
                });

            modelBuilder.Entity("backend_vincent.Model.Board", b =>
                {
                    b.Navigation("BoardEmployeeMappings");

                    b.Navigation("Columns");
                });

            modelBuilder.Entity("backend_vincent.Model.CalendarEntry", b =>
                {
                    b.Navigation("CalendarEntryEmployeeMapping");
                });

            modelBuilder.Entity("backend_vincent.Model.Card", b =>
                {
                    b.Navigation("ChecklistItems");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("backend_vincent.Model.Category", b =>
                {
                    b.Navigation("LocationCategories");
                });

            modelBuilder.Entity("backend_vincent.Model.Certification", b =>
                {
                    b.Navigation("LocationCertifications");
                });

            modelBuilder.Entity("backend_vincent.Model.CleaningAndDesinfection", b =>
                {
                    b.Navigation("CleaningAndDesinfectionResourceAccessMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.Column", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("backend_vincent.Model.Company", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Columns");

                    b.Navigation("Creator");

                    b.Navigation("Customers");

                    b.Navigation("Employees");

                    b.Navigation("Invitations");

                    b.Navigation("InvitedUsers");

                    b.Navigation("Locations");

                    b.Navigation("Notifications");

                    b.Navigation("Roles");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("backend_vincent.Model.CustomSubscription", b =>
                {
                    b.Navigation("SubscriptionModuleMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.Customer", b =>
                {
                    b.Navigation("AnimalMovements");

                    b.Navigation("BoardedAnimals");

                    b.Navigation("DepositBoxes");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("backend_vincent.Model.DeliveryNote", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("backend_vincent.Model.Employee", b =>
                {
                    b.Navigation("BoardEmployeeMappings");

                    b.Navigation("CalendarEntryEmployeeMappings");

                    b.Navigation("Comments");

                    b.Navigation("CreatedCalendarEvents");

                    b.Navigation("CreatedCards");

                    b.Navigation("CreatedColumns");

                    b.Navigation("NotificationEmployeeMappings");

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("backend_vincent.Model.Field", b =>
                {
                    b.Navigation("CropJournals");

                    b.Navigation("CropRotationPlans");

                    b.Navigation("Irrigations");
                });

            modelBuilder.Entity("backend_vincent.Model.FieldRow", b =>
                {
                    b.Navigation("CropJournals");

                    b.Navigation("CropRotationPlans");
                });

            modelBuilder.Entity("backend_vincent.Model.Harvest", b =>
                {
                    b.Navigation("ResourceAccess");
                });

            modelBuilder.Entity("backend_vincent.Model.Ingredient", b =>
                {
                    b.Navigation("RecipeIngredientMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.Invoice", b =>
                {
                    b.Navigation("AnimalMovements");

                    b.Navigation("BoardedAnimals");

                    b.Navigation("Machines");

                    b.Navigation("ResourceAccesses");

                    b.Navigation("Sales");

                    b.Navigation("Services");

                    b.Navigation("Treatments");

                    b.Navigation("WildCollections");
                });

            modelBuilder.Entity("backend_vincent.Model.Location", b =>
                {
                    b.Navigation("Boards");

                    b.Navigation("Fields");

                    b.Navigation("Harvests");

                    b.Navigation("LocationCategories");

                    b.Navigation("LocationCertifications");

                    b.Navigation("Machines");

                    b.Navigation("Sections");

                    b.Navigation("WildCollections");
                });

            modelBuilder.Entity("backend_vincent.Model.Machine", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("backend_vincent.Model.Module", b =>
                {
                    b.Navigation("SubscriptionModuleMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.Notification", b =>
                {
                    b.Navigation("NotificationEmployeeMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.Race", b =>
                {
                    b.Navigation("AnimalRaceMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.Recipe", b =>
                {
                    b.Navigation("RecipeIngredientMappings");
                });

            modelBuilder.Entity("backend_vincent.Model.ResourceStock", b =>
                {
                    b.Navigation("CleaningAndDesinfectionResourceAccessMappings");

                    b.Navigation("Ingredients");

                    b.Navigation("InternalUses");

                    b.Navigation("ResourceAccess");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("backend_vincent.Model.Section", b =>
                {
                    b.Navigation("AnimalGroups");

                    b.Navigation("Animals");
                });

            modelBuilder.Entity("backend_vincent.Model.Species", b =>
                {
                    b.Navigation("Races");
                });

            modelBuilder.Entity("backend_vincent.Model.Supplier", b =>
                {
                    b.Navigation("AnimalMovements");

                    b.Navigation("GMOCertifications");

                    b.Navigation("ResourceAccesses");
                });

            modelBuilder.Entity("backend_vincent.User", b =>
                {
                    b.Navigation("CompanyRole");

                    b.Navigation("CreatedInvitations");

                    b.Navigation("Employee");

                    b.Navigation("InvitationReceiver");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Subscription");
                });
#pragma warning restore 612, 618
        }
    }
}
